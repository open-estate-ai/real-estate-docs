{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Estate AI Documentation","text":"<p>Welcome to the documentation hub for Open Estate AI. Here you'll find guides, architecture, and usage examples for all our open-source real estate data projects.</p>"},{"location":"#what-is-open-estate-ai","title":"What is Open Estate AI?","text":"<p>Open Estate AI is an open-source initiative to make property data more accessible and actionable. We build tools and workflows for:</p> <ul> <li>Collecting real estate data from multiple sources</li> <li>Standardizing and storing data in a data lake</li> <li>Running scrapers and enrichment pipelines</li> <li>Integrating with MCP server and AI workflows</li> <li>Providing reusable templates for new scrapers and data tasks</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Explore the Getting Started guide for setup instructions.</li> <li>Check out our Architecture to understand how the pieces fit together.</li> <li>Browse Guides for step-by-step instructions on scrapers, data lake, and more.</li> </ul>"},{"location":"#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<ul> <li>Use the navigation bar to jump between guides, reference docs, and contribution info.</li> <li>Each section contains practical examples and tips.</li> <li>If you have questions or suggestions, join our Slack or open an issue on GitHub.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing page for guidelines and tips.</p>"},{"location":"#license","title":"License","text":"<p>This template is served under the MIT license. Read the [LICENSE] file for more info.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions from everyone! Here\u2019s how you can help:</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome! This guide will help you set up and use Open Estate AI projects.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Node.js and npm (for AWS CDK)</li> <li>AWS CLI configured (<code>aws configure</code>)</li> <li>Terraform (if using infra-as-code)</li> <li>An AWS account with suitable permissions</li> </ul>"},{"location":"getting-started/#quick-setup","title":"Quick Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/open-estate-ai/real-estate-docs.git\n</code></pre></p> </li> <li> <p>Create and activate a Python virtual environment:    <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>For documentation:    <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>For infrastructure:</p> </li> <li>See the Guides and Reference sections for details.</li> </ol>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>Join our Slack</li> <li>Open an issue on GitHub</li> </ul> <p>Feel free to suggest improvements or ask questions!</p>"},{"location":"architecture/overview/","title":"Architecture","text":"<p>This page gives a simple overview of the Open Estate AI architecture and how the main pieces fit together.</p> <p></p>"},{"location":"architecture/overview/#key-components","title":"Key Components","text":"<ul> <li> <p>Orchestrator   The central service that receives user queries, manages agents, and coordinates all tasks and workflows.</p> </li> <li> <p>Intent Classifier Agent   An agent that takes a user\u2019s query (free text) and converts it into structured intent and slots.</p> </li> <li>Input: <code>{ request_id, text, user_context }</code></li> <li>Output: <code>{ intent, slots, confidence, model_version }</code></li> <li> <p>Example:     Input: \"Find RERA-approved plots under 80 lakh near metro\"     Output: <pre><code>{\n  \"intent\": \"find_listings\",\n  \"slots\": {\n    \"property_type\": \"plot\",\n    \"max_price_inr\": 8000000,\n    \"near\": \"metro\",\n    \"goal\": \"investment\",\n    \"rera_status\": \"approved\"\n  },\n  \"confidence\": 0.92,\n  \"model_version\": \"intent-clf-v1.0.3\"\n}\n</code></pre></p> </li> <li> <p>Planner Agent   An agent that takes the intent and slots and builds a workflow (DAG) of tasks for other agents.</p> </li> <li>Input: <code>{ request_id, intent, slots, user_context, policy_overrides }</code></li> <li>Output: <code>{ dag: [ { task_id, task_type, payload_template, depends_on, timeout_ms, parallel_for } ], planner_meta }</code></li> <li> <p>Example:     Input: intent and slots from above     Output: <pre><code>{\n  \"dag\": [\n    {\n      \"task_id\": \"t1_search\",\n      \"task_type\": \"search_listings\",\n      \"payload_template\": {\n        \"property_type\": \"{{slots.property_type}}\",\n        \"max_price_inr\": \"{{slots.max_price_inr}}\",\n        \"near\": \"{{slots.near}}\"\n      },\n      \"depends_on\": [],\n      \"timeout_ms\": 5000\n    },\n    {\n      \"task_id\": \"t2_legal\",\n      \"task_type\": \"legal_check\",\n      \"payload_template\": {\n        \"listing_ids\": \"{{t1_search.candidates.ids}}\"\n      },\n      \"depends_on\": [\"t1_search\"],\n      \"timeout_ms\": 8000,\n      \"parallel_for\": \"candidates\"\n    }\n  ],\n  \"planner_meta\": {\n    \"version\": \"planner-v1.1.0\",\n    \"policy\": \"default\"\n  }\n}\n</code></pre></p> </li> <li> <p>Other Agents   Specialized agents that perform tasks such as searching listings, legal checks , valuation, and verification.   Each agent receives a task message, processes it, and returns a result.</p> </li> <li> <p>Message Queue   Used for communication between the Orchestrator and agents. Tasks and results are sent via topics (e.g., tasks.search, tasks.legal).</p> </li> <li> <p>Audit &amp; Metrics   All actions, results, and provenance are logged for traceability and debugging.</p> </li> </ul>"},{"location":"architecture/overview/#how-a-user-query-is-handled","title":"How a User Query is Handled","text":"<ol> <li> <p>User submits a query    Example: \"Find RERA-approved plots under \u20b980 lakh near metro, good for investment.\"</p> </li> <li> <p>Intent Classification    Orchestrator sends the query to the Intent Classifier Agent, which extracts intent and slots.</p> </li> <li> <p>Planning    Orchestrator sends the intent and slots to the Planner Agent, which creates a DAG of tasks.</p> </li> <li> <p>Task Execution    Orchestrator enqueues tasks to the message queue.    Agents pick up tasks, perform their work, and publish results.</p> </li> <li> <p>Aggregation &amp; Guardrails    Orchestrator collects results, runs checks (e.g., confidence, source verification), and composes the final answer.</p> </li> <li> <p>Response Delivery    Orchestrator returns results to the user. If some tasks are slow (like phone verification), it can return partial results and update later.</p> </li> <li> <p>Human Escalation    If confidence is low or a guardrail fails, Orchestrator creates a human review ticket.</p> </li> </ol>"},{"location":"architecture/overview/#summary","title":"Summary","text":"<p>Open Estate AI uses a modular, agent-based architecture to turn user queries into structured workflows. The Orchestrator coordinates the Intent Classifier Agent, Planner Agent, and other specialized agents to ensure reliable and traceable results.</p> <p>If you have questions or want to see more examples, check the guides or reach out on Slack or open an issue on GitHub!</p>"},{"location":"architecture/agents/legal-agent/","title":"Legal Agent","text":""},{"location":"architecture/agents/legal-agent/#what-it-does","title":"What it does","text":"<ul> <li>Checks if a property is legally safe.</li> <li>Looks at RERA approval, land/registry details, ownership, disputes, and uploaded documents.</li> <li>Returns a simple \u201clegal health report\u201d for each property.</li> </ul>"},{"location":"architecture/agents/legal-agent/#how-it-fits-in-the-system","title":"How it fits in the system","text":"<ul> <li>The Search Agent sends a task to the Legal Agent.</li> <li>The Legal Agent talks to official systems like RERA and land registry.</li> <li>It also scans any documents (like sale deeds) with OCR.</li> <li>After checks, it publishes a result message.</li> <li>The Orchestrator collects this and uses it in the final response.</li> </ul>"},{"location":"architecture/agents/legal-agent/#input-example-task","title":"Input (example task)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t2_legal_001\",\n    \"task_type\": \"legal_check\",\n    \"payload\": {\n        \"listing_ids\": [\"L-1001\", \"L-1002\"],\n        \"region\": \"Sonipat\"\n    }\n}\n</code></pre>"},{"location":"architecture/agents/legal-agent/#output-example-result","title":"Output (example result)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t2_legal_001\",\n    \"status\": \"completed\",\n    \"result\": [\n        {\n            \"listing_id\": \"L-1001\",\n            \"rera_status\": \"approved\",\n            \"ownership_match\": \"matched\",\n            \"encumbrance_flag\": \"none\",\n            \"litigation_flag\": \"none\",\n            \"document_verified\": true,\n            \"confidence\": 0.93,\n            \"provenance\": [\n                { \"source\": \"rera_api\", \"id\": \"RERA-987\", \"fetched_at\": \"2025-09-13T09:00:00Z\" }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"architecture/agents/legal-agent/#what-external-systems-it-connects-to","title":"What external systems it connects to","text":"<ul> <li>RERA API: for project approvals</li> <li>Land Registry: for ownership and encumbrance checks</li> <li>Court Records: for disputes/litigation</li> <li>OCR service: for scanning uploaded documents</li> </ul>"},{"location":"architecture/agents/legal-agent/#legal-agent_1","title":"Legal Agent","text":""},{"location":"architecture/agents/search-agent/","title":"Search Agent","text":"<p>The Search Agent is a simple service that helps find property listings based on user filters. It doesn\u2019t make decisions\u2014it just finds and returns the best matches for other agents to check.</p>"},{"location":"architecture/agents/search-agent/#what-does-the-search-agent-do","title":"What does the Search Agent do?","text":"<ul> <li>Takes search filters from the Orchestrator (like property type, price, location).</li> <li>Runs queries against your databases and APIs.</li> <li>Returns a ranked list of candidate properties with useful details.</li> </ul>"},{"location":"architecture/agents/search-agent/#how-does-it-work","title":"How does it work?","text":""},{"location":"architecture/agents/search-agent/#1-input","title":"1. Input","text":"<p>The Orchestrator sends a search task to the Search Agent. Example input:</p> <pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t1_search\",\n    \"task_type\": \"search_listings\",\n    \"payload\": {\n        \"property_type\": \"plot\",\n        \"max_price_inr\": 8000000,\n        \"near\": \"metro\",\n        \"radius_km\": 5,\n        \"freshness_days\": 30,\n        \"max_candidates\": 20\n    }\n}\n</code></pre>"},{"location":"architecture/agents/search-agent/#2-step-by-step-processing","title":"2. Step-by-step Processing","text":"<ul> <li> <p>Resolve location:     If the filter is \"near metro\", Search Agent calls a MAPS MCP (Model Context Protocol Server) to get metro station coordinates.</p> </li> <li> <p>Run database query:     Search Agent queries Athena (linked to your data lake) for listings matching the filters.</p> </li> <li> <p>Run fuzzy search:     For requirements like \"good for investment\", Search Agent uses a Vector DB to find listings with similar descriptions or reviews.</p> </li> <li> <p>Merge and rank:     Combines results from Athena and Vector DB, removes duplicates, and ranks by price, freshness, distance, and relevance.</p> </li> <li> <p>Check freshness:     If most listings are old, Search Agent can ask the Orchestrator to trigger fresh data ingestion.</p> </li> </ul>"},{"location":"architecture/agents/search-agent/#3-output","title":"3. Output","text":"<p>Search Agent sends results back to the Orchestrator:</p> <pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t1_search\",\n    \"status\": \"completed\",\n    \"result\": {\n        \"candidates\": [\n            {\n                \"listing_id\": \"L-1001\",\n                \"price\": 7800000,\n                \"lat\": 28.994,\n                \"lon\": 77.023,\n                \"rera_status\": \"approved\",\n                \"source\": \"99acres\",\n                \"fetch_time\": \"2025-09-13T10:00:00Z\",\n                \"score\": 0.91\n            },\n            {\n                \"listing_id\": \"L-1002\",\n                \"price\": 7500000,\n                \"lat\": 28.991,\n                \"lon\": 77.030,\n                \"rera_status\": \"pending\",\n                \"source\": \"magicbricks\",\n                \"fetch_time\": \"2025-09-12T15:00:00Z\",\n                \"score\": 0.87\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"architecture/agents/search-agent/#what-does-it-connect-to","title":"What does it connect to?","text":"<ul> <li> <p>Athena (Data Lake):     Finds listings using structured filters (price, type, location).</p> </li> <li> <p>Vector DB:     Finds listings using semantic similarity for fuzzy search.</p> </li> <li> <p>MAPS MCP:     Resolves location filters like \"near metro\" into coordinates.</p> </li> <li> <p>External Portals:     Uses data from MagicBricks, 99acres, etc. (via periodic ingestion).</p> </li> </ul>"},{"location":"architecture/agents/search-agent/#how-does-it-fit-in-the-flow","title":"How does it fit in the flow?","text":"<ol> <li>User asks a question.</li> <li>Orchestrator sends a search task to Search Agent.</li> <li>Search Agent queries Athena, Vector DB, and MAPS MCP.</li> <li>Search Agent ranks and returns candidate listings.</li> <li>Orchestrator sends candidates to Legal, Valuation, and Verification Agents.</li> </ol>"},{"location":"architecture/agents/search-agent/#in-short","title":"In short","text":"<p>The Search Agent is the \u201cretrieval brain\u201d of your system. It finds the best property matches and passes them on for deeper checks.</p>"},{"location":"architecture/agents/search-agent/#example-request","title":"Example Request","text":"<pre><code>{\n    \"request_id\": \"req-002\",\n    \"task_id\": \"t1_search\",\n    \"task_type\": \"search_listings\",\n    \"payload\": {\n        \"property_type\": \"flat\",\n        \"max_price_inr\": 6000000,\n        \"near\": \"Sector 14\",\n        \"radius_km\": 2,\n        \"freshness_days\": 15,\n        \"max_candidates\": 10\n    }\n}\n</code></pre>"},{"location":"architecture/agents/search-agent/#example-response","title":"Example Response","text":"<pre><code>{\n    \"request_id\": \"req-002\",\n    \"task_id\": \"t1_search\",\n    \"status\": \"completed\",\n    \"result\": {\n        \"candidates\": [\n            {\n                \"listing_id\": \"F-2001\",\n                \"price\": 5900000,\n                \"lat\": 28.990,\n                \"lon\": 77.025,\n                \"rera_status\": \"approved\",\n                \"source\": \"Housing.com\",\n                \"fetch_time\": \"2025-09-13T09:00:00Z\",\n                \"score\": 0.93\n            }\n        ]\n    }\n}\n</code></pre> <p>If you have questions or want to see more examples, check the guides or reach out on Slack or open an issue on GitHub!</p>"},{"location":"architecture/agents/summarizer-agent/","title":"Summarizer Agent","text":""},{"location":"architecture/agents/summarizer-agent/#what-it-does","title":"What it does","text":"<ul> <li>Takes outputs from the Search, Legal, Valuation, and Verification Agents.</li> <li>Combines them into a clear, user-friendly response.</li> <li>Explains why a property is good or bad, highlights risks, and attaches supporting evidence (citations).</li> </ul>"},{"location":"architecture/agents/summarizer-agent/#how-it-fits-in-the-system","title":"How it fits in the system","text":"<ul> <li>The Orchestrator waits until Search, Legal, Valuation, and Verification results are ready.</li> <li>The Orchestrator creates a summarize_response task and sends it to the Summarizer Agent.</li> <li>The Summarizer Agent collects these inputs (or references to them).</li> <li>It uses an LLM + RAG (retrieves supporting docs if needed) to generate a plain-text explanation.</li> <li>It attaches provenance so the system can prove each claim.</li> <li>The final summary goes back to the Results Queue, where the Orchestrator picks it up and runs Output Guardrails.</li> </ul>"},{"location":"architecture/agents/summarizer-agent/#input-example-task","title":"Input (example task)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t5_summarize_001\",\n    \"task_type\": \"summarize_response\",\n    \"payload\": {\n        \"user_query\": \"Find me RERA-approved plots under 80 lakh near metro\",\n        \"search_results\": { /* candidates from Search Agent */ },\n        \"legal_results\": [ /* results from Legal Agent */ ],\n        \"valuation_results\": [ /* results from Valuation Agent */ ],\n        \"verification_results\": [ /* results from Verification Agent */ ]\n    }\n}\n</code></pre>"},{"location":"architecture/agents/summarizer-agent/#output-example-result","title":"Output (example result)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t5_summarize_001\",\n    \"status\": \"completed\",\n    \"result\": {\n        \"summary_text\": \"2 plots found near metro. Plot L-1001 is RERA-approved, fairly priced at ~\u20b976L, and has a strong investment score (0.78). Verified ownership. Plot L-1002 is cheaper but RERA approval is pending and ownership is unverified, making it riskier.\",\n        \"candidates\": [\n            { \"listing_id\": \"L-1001\", \"final_score\": 0.82, \"recommendation\": \"good\" },\n            { \"listing_id\": \"L-1002\", \"final_score\": 0.55, \"recommendation\": \"risky\" }\n        ],\n        \"citations\": [\n            { \"listing_id\": \"L-1001\", \"source\": \"RERA API\", \"fetched_at\": \"2025-09-13T09:00:00Z\" },\n            { \"listing_id\": \"L-1001\", \"source\": \"Timeseries DB\", \"fetched_at\": \"2025-09-12T10:30:00Z\" }\n        ]\n    }\n}\n</code></pre>"},{"location":"architecture/agents/valuation-agent/","title":"Valuation Agent","text":""},{"location":"architecture/agents/valuation-agent/#what-it-does","title":"What it does","text":"<ul> <li>Estimates a property\u2019s fair price.</li> <li>Gives simple scores for investment and residential suitability.</li> <li>Combines recent sales (comps), time-series trends, location features, legal flags, and builder signals to produce a price range, scores, and an uncertainty measure.</li> </ul>"},{"location":"architecture/agents/valuation-agent/#how-it-fits-in-the-system","title":"How it fits in the system","text":"<ul> <li>The Search Agent sends a valuation task to the Valuation Agent.</li> <li>The Valuation Agent gathers data from internal stores and external services (comps, timeseries, maps, builder DB).</li> <li>It runs models or heuristics to compute price and scores.</li> <li>It returns structured results with model version, feature contributions, confidence, and provenance.</li> <li>The Orchestrator uses these results when composing the final response.</li> </ul>"},{"location":"architecture/agents/valuation-agent/#input-example-task","title":"Input (example task)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t3_valuation_001\",\n    \"task_type\": \"valuation\",\n    \"payload\": {\n        \"listing_ids\": [\"L-1001\", \"L-1002\"],\n        \"goal\": \"investment\",\n        \"model_version\": \"valuation-v1.2\"\n    },\n    \"context\": { \"user_id\": \"u-123\", \"region\": \"Sonipat\" },\n    \"retries\": { \"attempt\": 0, \"max_attempts\": 2 }\n}\n</code></pre>"},{"location":"architecture/agents/valuation-agent/#output-example-result","title":"Output (example result)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t3_valuation_001\",\n    \"task_type\": \"valuation\",\n    \"status\": \"completed\",\n    \"result\": {\n        \"valuations\": [\n            {\n                \"listing_id\": \"L-1001\",\n                \"fair_price_range\": { \"low\": 7300000, \"mid\": 7600000, \"high\": 7900000 },\n                \"investment_score\": 0.78,\n                \"residential_score\": 0.62,\n                \"estimated_rental_yield\": 0.045,\n                \"uncertainty\": 0.07,\n                \"model_version\": \"valuation-v1.2\",\n                \"feature_contributions\": [\n                    { \"feature\": \"distance_to_metro\", \"impact\": 0.12 },\n                    { \"feature\": \"rera_status\", \"impact\": -0.30 }\n                ],\n                \"provenance\": [\n                    { \"source\": \"comps_service\", \"id\": \"comp-234\", \"fetched_at\": \"2025-09-12T08:00:00Z\" },\n                    { \"source\": \"timeseries_db\", \"range\": \"2018-2025\" }\n                ]\n            }\n        ]\n    },\n    \"timestamps\": { \"started_at\": \"2025-09-13T10:05:00Z\", \"completed_at\": \"2025-09-13T10:05:03Z\" }\n}\n</code></pre>"},{"location":"architecture/agents/verification-agent/","title":"Verification Agent","text":""},{"location":"architecture/agents/verification-agent/#what-it-does","title":"What it does","text":"<ul> <li>Makes sure the property details and the owner are genuine.</li> <li>Checks ownership documents, scans them for accuracy, and may also confirm contact details of the seller or builder.</li> <li>Returns a clear \u201cverification status\u201d for each property.</li> </ul>"},{"location":"architecture/agents/verification-agent/#how-it-fits-in-the-system","title":"How it fits in the system","text":"<ul> <li>The Search Agent sends a task to the Verification Agent.</li> <li>The Verification Agent looks at the documents linked to the listing.</li> <li>It uses OCR to read scanned documents and compares them with official records.</li> <li>It can also send SMS/phone/email checks to verify the owner\u2019s contact info.</li> <li>After checks, it publishes a result message.</li> <li>The Orchestrator collects this result and uses it in the final summary for the user.</li> </ul>"},{"location":"architecture/agents/verification-agent/#input-example-task","title":"Input (example task)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t3_verify_001\",\n    \"task_type\": \"verification\",\n    \"payload\": {\n        \"listing_id\": \"L-1001\",\n        \"owner_docs\": [\"doc-567\"],\n        \"contact_number\": \"+91-9876543210\"\n    }\n}\n</code></pre>"},{"location":"architecture/agents/verification-agent/#output-example-result","title":"Output (example result)","text":"<pre><code>{\n    \"request_id\": \"req-001\",\n    \"task_id\": \"t3_verify_001\",\n    \"status\": \"completed\",\n    \"result\": {\n        \"listing_id\": \"L-1001\",\n        \"owner_verified\": true,\n        \"docs_verified\": [\"doc-567\"],\n        \"contact_verified\": true,\n        \"confidence\": 0.88,\n        \"provenance\": [\n            { \"source\": \"ocr_service\", \"doc_id\": \"doc-567\", \"fetched_at\": \"2025-09-13T10:00:00Z\" }\n        ]\n    }\n}\n</code></pre>"},{"location":"architecture/agents/verification-agent/#what-external-systems-it-connects-to","title":"What external systems it connects to","text":"<ul> <li>OCR Service: to read and check uploaded ownership documents</li> <li>Registry / Legal DB: to cross-check the names and IDs from documents</li> <li>SMS/Email/Phone Verification Service: to verify contact details</li> <li>Builder/Owner Database: to confirm identity and past history</li> </ul>"},{"location":"architecture/agents/verification-agent/#verification-agent_1","title":"Verification Agent","text":""}]}